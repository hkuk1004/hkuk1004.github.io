{"version":3,"file":"static/js/802.d4485cb0.chunk.js","mappings":"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","sources":["routes/AddDestinationMap.jsx"],"sourcesContent":["import axios from \"axios\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { styled } from \"styled-components\";\nimport markerIcon from \"../assets/image/marker.png\";\nimport starIcon from \"../assets/image/starIcon.png\";\n\nconst AddDestinationMap = () => {\n  // const [myLocation, setMyLocation] = useState({});\n  const [top12List, setTop12List] = useState([]);\n  const [markerArr, setMarkerArr] = useState([]);\n  // const [placeInfo, setPlaceInfo] = useState({});\n  const { naver } = window;\n  const [map, setMap] = useState([]);\n  // const map = useRef({});\n  const markers = useRef([]);\n  const [zoomMap, setZoomMap] = useState([]);\n  const [regionSelect, setRegionSelect] = useState(\"지역 전체\");\n  const [didMount, setDidMount] = useState(false);\n\n  const send = (data) => {\n    window.ReactNativeWebView.postMessage(JSON.stringify(data));\n  };\n\n  // const addrReplace = (place) => {\n  //   if (place !== undefined) {\n  //     const splitAddr = place.split(\" \");\n  //     const Addr = splitAddr.slice(0, 2).join(\" \");\n  //     return Addr;\n  //   }\n  // };\n\n  // useEffect(() => {\n  //   const getData = async () => {\n  //     await axios({\n  //       method: \"post\",\n  //       url: `${process.env.REACT_APP_API_URL}/place/recommand`,\n  //       data: {\n  //         curPage: 1,\n  //       },\n  //     })\n  //       .then((res) => {\n  //         // console.log(res.data.dataList);\n  //         setTop12List(res.data.dataList);\n  //         const copyArr = [...res.data.dataList];\n  //         const result = copyArr.map((el) => {\n  //           return { lat: el.mapy, lng: el.mapx };\n  //         });\n  //         setMarkerArr(result);\n  //         console.log(result);\n  //         // send(res.data.dataList[0]);\n  //       })\n  //       .catch((err) => {\n  //         console.log(err);\n  //       });\n  //   };\n  //   getData();\n  // }, []);\n\n  useEffect(() => {\n    //android\n    document.addEventListener(\"message\", (e) => {\n      const parseData = JSON.parse(e.data);\n      setTop12List(parseData.dataList);\n      const copyArr = [...parseData.dataList];\n      const result = copyArr.map((el) => {\n        return { lat: el.mapy, lng: el.mapx };\n      });\n      setMarkerArr(result);\n      // setPlaceInfo(parseData[0]);\n      setZoomMap(parseData?.region);\n      setRegionSelect(parseData?.regionSelect);\n    });\n    //ios\n    window.addEventListener(\"message\", (e) => {\n      const parseData = JSON.parse(e.data);\n      setTop12List(parseData.dataList);\n      const copyArr = [...parseData.dataList];\n      const result = copyArr.map((el) => {\n        return { lat: el.mapy, lng: el.mapx };\n      });\n      setMarkerArr(result);\n      // setPlaceInfo(parseData[0]);\n      setZoomMap(parseData?.region);\n      setRegionSelect(parseData?.regionSelect);\n    });\n  }, []);\n\n  // 주변마커 오버레이 클릭 이벤트 적용하기\n  useEffect(() => {\n    const firstMap = new naver.maps.Map(\"map\", {\n      center: new naver.maps.LatLng(36.5, 127.6),\n      zoomControl: false,\n      zoom: 6,\n    });\n    // map.current = firstMap;\n    setMap(firstMap);\n    setDidMount(true);\n    // // 주변 마커 나타내기\n    // const markers = [];\n    // // 반복문을 통해 찍어준다\n    // for (let i = 0; i < markerArr.length; i += 1) {\n    //   const otherMarkers = new naver.maps.Marker({\n    //     position: new naver.maps.LatLng(markerArr[i].lat, markerArr[i].lng),\n    //     map,\n    //     // 원하는 이미지로 마커 커스텀\n    //     icon: {\n    //       url: markerIcon,\n    //       size: new naver.maps.Size(50, 52),\n    //       scaledSize: new naver.maps.Size(50, 52),\n    //       origin: new naver.maps.Point(0, 0),\n    //       anchor: new naver.maps.Point(25, 26),\n    //     },\n    //   });\n\n    //   markers.push(otherMarkers);\n    // }\n\n    // const getClickHandler = (seq) => {\n    //   return () => {\n    //     const marker = markers[seq];\n    //     console.log(seq);\n    //     setPlaceInfo(top12List[seq]);\n    //     send();\n    //   };\n    // };\n\n    // for (let i = 0; i < markers.length; i += 1) {\n    //   naver.maps.Event.addListener(markers[i], \"click\", getClickHandler(i));\n    // }\n  }, []);\n  useEffect(() => {\n    // 주변 마커 나타내기\n    if (markers.current[0]) {\n      markers.current.forEach((e) => {\n        e.setMap(null);\n      });\n      // markerList 배열 초기화\n      markers.current.splice(0);\n    }\n    // const markers = [];\n    // 반복문을 통해 찍어준다\n    for (let i = 0; i < markerArr.length; i++) {\n      const otherMarkers = new naver.maps.Marker({\n        position: new naver.maps.LatLng(markerArr[i].lat, markerArr[i].lng),\n        map,\n        // 원하는 이미지로 마커 커스텀\n        icon: {\n          url: markerIcon,\n          size: new naver.maps.Size(50, 52),\n          scaledSize: new naver.maps.Size(50, 52),\n          origin: new naver.maps.Point(0, 0),\n          anchor: new naver.maps.Point(25, 26),\n        },\n      });\n\n      markers.current.push(otherMarkers);\n\n      // naver.maps.Event.addListener(map, \"idle\", () => {\n      //   updateMarkers(map, markers);\n      // });\n      // const updateMarkers = (isMap, isMarkers) => {\n      //   const mapBounds = isMap.getBounds();\n      //   let marker;\n      //   let position;\n\n      //   for (let i = 0; i < isMarkers.length; i += 1) {\n      //     marker = isMarkers[i];\n      //     position = marker.getPosition();\n\n      //     if (mapBounds.hasLatLng(position)) {\n      //       showMarker(isMap, marker);\n      //     } else {\n      //       hideMarker(marker);\n      //     }\n      //   }\n      // };\n\n      // const showMarker = (isMap, marker) => {\n      //   marker.setMap(isMap);\n      // };\n\n      // const hideMarker = (marker) => {\n      //   marker.setMap(null);\n      // };\n      // for (let i = 0, len = markers.length; i < len; i++) {\n      //   markers[i].setMap(null);\n      // }\n    }\n\n    const getClickHandler = (seq) => {\n      return () => {\n        // const marker = markers[seq];\n        const sendData = {\n          placeInfo: top12List[seq],\n          index: seq,\n        };\n        // setPlaceInfo(top12List[seq]);\n        send(sendData);\n      };\n    };\n\n    for (let i = 0; i < markers.current.length; i += 1) {\n      naver.maps.Event.addListener(markers.current[i], \"click\", getClickHandler(i));\n    }\n\n    if (regionSelect) {\n      if (regionSelect !== \"지역 전체\") {\n        const selectLocation = zoomMap.filter((el) => {\n          return el.region === regionSelect;\n        });\n        let moveLocation = new naver.maps.LatLng(selectLocation[0]?.mapy, selectLocation[0]?.mapx);\n        // map.panTo(moveLocation);\n        // map.setOptions(\"zoom\", 8);\n        map.morph(moveLocation, 8);\n        // alert(moveLocation);\n      } else {\n        if (didMount) {\n          let allRegion = new naver.maps.LatLng(36.5, 127.6);\n          // map.panTo(allRegion);\n          // map.setOptions(\"zoom\", 7);\n          map.morph(allRegion, 6);\n          // alert(allRegion);\n        }\n      }\n    } else {\n      let moveLocation = new naver.maps.LatLng(top12List[0]?.mapy, top12List[0]?.mapx);\n      map.morph(moveLocation, 11);\n      // alert(moveLocation);\n    }\n  }, [top12List]);\n  return (\n    <Container>\n      <div id=\"map\" style={{ width: \"100%\", display: \"flex\", flex: 1 }} />\n      {/* <InfoContainer>\n        <InfoImg src={placeInfo.firstimage2} />\n        <InfoTextContainer>\n          <InfoTextTop>\n            <TitleArea>\n              {placeInfo.title}\n              <StarIcon src={starIcon} />5\n            </TitleArea>\n            <CategoryArea>{placeInfo.describe}</CategoryArea>\n          </InfoTextTop>\n          <InfoTextBottom>\n            <BottomLeft>{addrReplace(placeInfo.addr1)}</BottomLeft>\n            <AddBtn>등록</AddBtn>\n          </InfoTextBottom>\n        </InfoTextContainer>\n      </InfoContainer> */}\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  width: 100%;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  flex: 1;\n  flex-direction: column;\n`;\nconst MapContainer = styled.div`\n  width: 100%;\n  display: flex;\n  flex: 1;\n`;\nconst InfoContainer = styled.div`\n  display: flex;\n  width: 100%;\n  height: 120px;\n  padding: 10px 20px;\n  flex-direction: row;\n  background-color: #fff;\n  border-top: 1px solid #d9d9d9;\n`;\nconst InfoImg = styled.img`\n  width: 100px;\n  height: 100px;\n  border-radius: 8px;\n  margin-right: 10px;\n`;\nconst InfoTextContainer = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: space-between;\n`;\nconst InfoTextTop = styled.div`\n  display: flex;\n  width: 100%;\n  height: 45px;\n  flex-direction: column;\n  justify-content: space-between;\n`;\nconst InfoTextBottom = styled.div`\n  display: flex;\n  width: 100%;\n  height: 42px;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n`;\nconst TitleArea = styled.div`\n  display: flex;\n  height: 26px;\n  flex: 1;\n  font-size: 18px;\n  font-weight: 500;\n  line-height: 26.06px;\n  color: #000;\n  align-items: center;\n`;\nconst CategoryArea = styled.div`\n  display: flex;\n  font-size: 12px;\n  font-weight: 300;\n  line-height: 17.38px;\n  color: #25b1fa;\n`;\nconst StarIcon = styled.img`\n  width: 18px;\n  height: 18px;\n  margin-left: 10px;\n  margin-right: 6px;\n`;\nconst BottomLeft = styled.div`\n  display: flex;\n  flex: 1;\n`;\nconst AddBtn = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 55px;\n  height: 30px;\n  border: 1px solid #25b1fa;\n  border-radius: 8px;\n  font-size: 12px;\n  font-weight: 500;\n  line-height: 17.38px;\n  color: #25b1fa;\n  cursor: pointer;\n`;\n\nexport default AddDestinationMap;\n"],"names":["Container","styled","div","_templateObject","_taggedTemplateLiteral","_templateObject2","_templateObject3","img","_templateObject4","_templateObject5","_templateObject6","_templateObject7","_templateObject8","_templateObject9","_templateObject10","_templateObject11","_templateObject12","_useState","useState","_useState2","_slicedToArray","top12List","setTop12List","_useState3","_useState4","markerArr","setMarkerArr","naver","window","_useState5","_useState6","map","setMap","markers","useRef","_useState7","_useState8","zoomMap","setZoomMap","_useState9","_useState10","regionSelect","setRegionSelect","_useState11","_useState12","didMount","setDidMount","useEffect","document","addEventListener","e","parseData","JSON","parse","data","dataList","result","_toConsumableArray","el","lat","mapy","lng","mapx","region","firstMap","maps","Map","center","LatLng","zoomControl","zoom","current","forEach","splice","i","length","otherMarkers","Marker","position","icon","url","markerIcon","size","Size","scaledSize","origin","Point","anchor","push","getClickHandler","seq","sendData","placeInfo","index","ReactNativeWebView","postMessage","stringify","Event","addListener","_selectLocation$","_selectLocation$2","selectLocation","filter","moveLocation","morph","allRegion","_top12List$","_top12List$2","_jsx","children","id","style","width","display","flex"],"sourceRoot":""}