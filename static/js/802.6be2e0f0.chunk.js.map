{"version":3,"file":"static/js/802.6be2e0f0.chunk.js","mappings":"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","sources":["routes/AddDestinationMap.jsx"],"sourcesContent":["import axios from \"axios\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { styled } from \"styled-components\";\nimport markerIcon from \"../assets/image/marker.png\";\nimport starIcon from \"../assets/image/starIcon.png\";\n\nconst AddDestinationMap = () => {\n  // const [myLocation, setMyLocation] = useState({});\n  const [top12List, setTop12List] = useState([]);\n  const [markerArr, setMarkerArr] = useState([]);\n  const [placeInfo, setPlaceInfo] = useState({});\n  const { naver } = window;\n\n  const send = () => {\n    window.ReactNativeWebView.postMessage(\"결과 값 출력\");\n  };\n\n  const addrReplace = (place) => {\n    if (place !== undefined) {\n      const splitAddr = place.split(\" \");\n      const Addr = splitAddr.slice(0, 2).join(\" \");\n      return Addr;\n    }\n  };\n\n  // useEffect(() => {\n  //   const getData = async () => {\n  //     await axios({\n  //       method: \"post\",\n  //       url: `${process.env.REACT_APP_API_URL}/place/recommand`,\n  //       data: {\n  //         curPage: 1,\n  //       },\n  //     })\n  //       .then((res) => {\n  //         console.log(res.data.dataList);\n  //         // setTop12List(res.data.dataList);\n  //         // const copyArr = [...res.data.dataList];\n  //         // const result = copyArr.map((el) => {\n  //         //   return { lat: el.mapy, lng: el.mapx };\n  //         // });\n  //         // setMarkerArr(result);\n  //         // setPlaceInfo(res.data.dataList[0]);\n  //       })\n  //       .catch((err) => {\n  //         console.log(err);\n  //       });\n  //   };\n  //   getData();\n  // }, []);\n\n  useEffect(() => {\n    //android\n    document.addEventListener(\"message\", (e) => {\n      const parseData = JSON.parse(e.data);\n      setTop12List(parseData);\n      const copyArr = [...parseData];\n      const result = copyArr.map((el) => {\n        return { lat: el.mapy, lng: el.mapx };\n      });\n      setMarkerArr(result);\n      setPlaceInfo(parseData[0]);\n    });\n    //ios\n    window.addEventListener(\"message\", (e) => {\n      const parseData = JSON.parse(e.data);\n      setTop12List(parseData);\n      const copyArr = [...parseData];\n      const result = copyArr.map((el) => {\n        return { lat: el.mapy, lng: el.mapx };\n      });\n      setMarkerArr(result);\n      setPlaceInfo(parseData[0]);\n    });\n  }, []);\n\n  // 현재 위치 받아오기\n  // useEffect(() => {\n  //   if (navigator.geolocation) {\n  //     navigator.geolocation.getCurrentPosition((position) => {\n  //       setMyLocation({\n  //         latitude: position.coords.latitude,\n  //         longitude: position.coords.longitude,\n  //       });\n  //     });\n  //   } else {\n  //     window.alert(\"현재위치를 알수 없습니다.\");\n  //   }\n  // }, []);\n  // console.log(myLocation);\n\n  // 주변마커 오버레이 클릭 이벤트 적용하기\n  useEffect(() => {\n    const map = new naver.maps.Map(\"map\", {\n      center: new naver.maps.LatLng(36.5, 127.6),\n      zoomControl: true,\n      zoom: 7,\n    });\n\n    // const currentMarker = new naver.maps.Marker({\n    //   position: new naver.maps.LatLng(37.4859, 126.997865),\n    //   map,\n    //   // icon: {\n    //   //   url: \"../assets/image/marker.png\",\n    //   //   size: new naver.maps.Size(50, 52),\n    //   //   origin: new naver.maps.Point(0, 0),\n    //   //   anchor: new naver.maps.Point(25, 26),\n    //   // },\n    // });\n\n    // 주변 마커 나타내기\n    const markers = [];\n    // const infowindows = [];\n    // const contentTags =\n    //   '<div class=\"naver-container\"><p class=\"ptag\">여깁니다</p><span class=\"spantag\">맞아요</span></div>';\n\n    // 반복문을 통해 찍어준다\n    for (let i = 0; i < markerArr.length; i += 1) {\n      const otherMarkers = new naver.maps.Marker({\n        position: new naver.maps.LatLng(markerArr[i].lat, markerArr[i].lng),\n        map,\n        // 원하는 이미지로 마커 커스텀\n        icon: {\n          url: markerIcon,\n          size: new naver.maps.Size(50, 52),\n          scaledSize: new naver.maps.Size(50, 52),\n          origin: new naver.maps.Point(0, 0),\n          anchor: new naver.maps.Point(25, 26),\n        },\n      });\n\n      // const infowindow = new naver.maps.InfoWindow({\n      //   content: contentTags,\n      //   borderWidth: 1,\n      //   anchorSize: new naver.maps.Size(10, 10),\n      //   pixelOffset: new naver.maps.Point(10, -10),\n      // });\n\n      markers.push(otherMarkers);\n      // infowindows.push(infowindow);\n    }\n\n    naver.maps.Event.addListener(map, \"idle\", () => {\n      updateMarkers(map, markers);\n    });\n\n    const updateMarkers = (isMap, isMarkers) => {\n      const mapBounds = isMap.getBounds();\n      let marker;\n      let position;\n\n      for (let i = 0; i < isMarkers.length; i += 1) {\n        marker = isMarkers[i];\n        position = marker.getPosition();\n\n        if (mapBounds.hasLatLng(position)) {\n          showMarker(isMap, marker);\n        } else {\n          hideMarker(marker);\n        }\n      }\n    };\n\n    const showMarker = (isMap, marker) => {\n      marker.setMap(isMap);\n    };\n\n    const hideMarker = (marker) => {\n      marker.setMap(null);\n    };\n\n    const getClickHandler = (seq) => {\n      return () => {\n        const marker = markers[seq];\n        // const infoWindow = infowindows[seq];\n        console.log(seq);\n        setPlaceInfo(top12List[seq]);\n        send();\n\n        // if (infoWindow.getMap()) {\n        //   infoWindow.close();\n        // } else {\n        //   infoWindow.open(map, marker);\n        // }\n      };\n    };\n\n    for (let i = 0; i < markers.length; i += 1) {\n      naver.maps.Event.addListener(markers[i], \"click\", getClickHandler(i));\n    }\n  }, [top12List]);\n  return (\n    <Container>\n      <div id=\"map\" style={{ width: \"100%\", display: \"flex\", flex: 1 }} />\n      <InfoContainer>\n        <InfoImg src={placeInfo.firstimage2} />\n        <InfoTextContainer>\n          <InfoTextTop>\n            <TitleArea>\n              {placeInfo.title}\n              <StarIcon src={starIcon} />5\n            </TitleArea>\n            <CategoryArea>{placeInfo.describe}</CategoryArea>\n          </InfoTextTop>\n          <InfoTextBottom>\n            <BottomLeft>{addrReplace(placeInfo.addr1)}</BottomLeft>\n            <AddBtn>등록</AddBtn>\n          </InfoTextBottom>\n        </InfoTextContainer>\n      </InfoContainer>\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  width: 100%;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  flex: 1;\n  flex-direction: column;\n`;\nconst MapContainer = styled.div`\n  width: 100%;\n  display: flex;\n  flex: 1;\n`;\nconst InfoContainer = styled.div`\n  display: flex;\n  width: 100%;\n  height: 120px;\n  padding: 10px 20px;\n  flex-direction: row;\n  background-color: #fff;\n  border-top: 1px solid #d9d9d9;\n`;\nconst InfoImg = styled.img`\n  width: 100px;\n  height: 100px;\n  border-radius: 8px;\n  margin-right: 10px;\n`;\nconst InfoTextContainer = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: space-between;\n`;\nconst InfoTextTop = styled.div`\n  display: flex;\n  width: 100%;\n  height: 45px;\n  flex-direction: column;\n  justify-content: space-between;\n`;\nconst InfoTextBottom = styled.div`\n  display: flex;\n  width: 100%;\n  height: 42px;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n`;\nconst TitleArea = styled.div`\n  display: flex;\n  height: 26px;\n  flex: 1;\n  font-size: 18px;\n  font-weight: 500;\n  line-height: 26.06px;\n  color: #000;\n  align-items: center;\n`;\nconst CategoryArea = styled.div`\n  display: flex;\n  font-size: 12px;\n  font-weight: 300;\n  line-height: 17.38px;\n  color: #25b1fa;\n`;\nconst StarIcon = styled.img`\n  width: 18px;\n  height: 18px;\n  margin-left: 10px;\n  margin-right: 6px;\n`;\nconst BottomLeft = styled.div`\n  display: flex;\n  flex: 1;\n`;\nconst AddBtn = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 55px;\n  height: 30px;\n  border: 1px solid #25b1fa;\n  border-radius: 8px;\n  font-size: 12px;\n  font-weight: 500;\n  line-height: 17.38px;\n  color: #25b1fa;\n  cursor: pointer;\n`;\n\nexport default AddDestinationMap;\n"],"names":["Container","styled","div","_templateObject","_taggedTemplateLiteral","InfoContainer","_templateObject2","_templateObject3","InfoImg","img","_templateObject4","InfoTextContainer","_templateObject5","InfoTextTop","_templateObject6","InfoTextBottom","_templateObject7","TitleArea","_templateObject8","CategoryArea","_templateObject9","StarIcon","_templateObject10","BottomLeft","_templateObject11","AddBtn","_templateObject12","_useState","useState","_useState2","_slicedToArray","top12List","setTop12List","_useState3","_useState4","markerArr","setMarkerArr","_useState5","_useState6","placeInfo","setPlaceInfo","naver","window","useEffect","document","addEventListener","e","parseData","JSON","parse","data","result","_toConsumableArray","map","el","lat","mapy","lng","mapx","maps","Map","center","LatLng","zoomControl","zoom","markers","i","length","otherMarkers","Marker","position","icon","url","markerIcon","size","Size","scaledSize","origin","Point","anchor","push","Event","addListener","updateMarkers","isMap","isMarkers","marker","mapBounds","getBounds","getPosition","hasLatLng","showMarker","hideMarker","setMap","getClickHandler","seq","console","log","ReactNativeWebView","postMessage","_jsxs","children","_jsx","id","style","width","display","flex","src","firstimage2","title","describe","place","undefined","split","slice","join","addrReplace","addr1"],"sourceRoot":""}