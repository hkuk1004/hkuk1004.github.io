{"version":3,"file":"static/js/802.cef58373.chunk.js","mappings":"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","sources":["routes/AddDestinationMap.jsx"],"sourcesContent":["import axios from \"axios\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { styled } from \"styled-components\";\nimport markerIcon from \"../assets/image/marker.png\";\nimport starIcon from \"../assets/image/starIcon.png\";\n\nconst AddDestinationMap = () => {\n  // const [myLocation, setMyLocation] = useState({});\n  const [top12List, setTop12List] = useState([]);\n  const [markerArr, setMarkerArr] = useState([]);\n  const [placeInfo, setPlaceInfo] = useState({});\n  const { naver } = window;\n  const [map, setMap] = useState([]);\n  const markers = useRef([]);\n\n  const send = (data) => {\n    window.ReactNativeWebView.postMessage(data);\n  };\n\n  const addrReplace = (place) => {\n    if (place !== undefined) {\n      const splitAddr = place.split(\" \");\n      const Addr = splitAddr.slice(0, 2).join(\" \");\n      return Addr;\n    }\n  };\n\n  // useEffect(() => {\n  //   const getData = async () => {\n  //     await axios({\n  //       method: \"post\",\n  //       url: `${process.env.REACT_APP_API_URL}/place/recommand`,\n  //       data: {\n  //         curPage: 1,\n  //       },\n  //     })\n  //       .then((res) => {\n  //         console.log(res.data.dataList);\n  //         // setTop12List(res.data.dataList);\n  //         // const copyArr = [...res.data.dataList];\n  //         // const result = copyArr.map((el) => {\n  //         //   return { lat: el.mapy, lng: el.mapx };\n  //         // });\n  //         // setMarkerArr(result);\n  //         // setPlaceInfo(res.data.dataList[0]);\n  //       })\n  //       .catch((err) => {\n  //         console.log(err);\n  //       });\n  //   };\n  //   getData();\n  // }, []);\n\n  // useEffect(() => {\n  //android\n  document.addEventListener(\"message\", (e) => {\n    const parseData = JSON.parse(e.data);\n    setTop12List(parseData);\n    const copyArr = [...parseData];\n    const result = copyArr.map((el) => {\n      return { lat: el.mapy, lng: el.mapx };\n    });\n    setMarkerArr(result);\n    setPlaceInfo(parseData[0]);\n  });\n  //ios\n  window.addEventListener(\"message\", (e) => {\n    const parseData = JSON.parse(e.data);\n    setTop12List(parseData);\n    const copyArr = [...parseData];\n    const result = copyArr.map((el) => {\n      return { lat: el.mapy, lng: el.mapx };\n    });\n    setMarkerArr(result);\n    setPlaceInfo(parseData[0]);\n  });\n  // }, []);\n\n  // 주변마커 오버레이 클릭 이벤트 적용하기\n  useEffect(() => {\n    const firstMap = new naver.maps.Map(\"map\", {\n      center: new naver.maps.LatLng(36.5, 127.6),\n      zoomControl: true,\n      zoom: 7,\n    });\n    setMap(firstMap);\n    // // 주변 마커 나타내기\n    // const markers = [];\n    // // 반복문을 통해 찍어준다\n    // for (let i = 0; i < markerArr.length; i += 1) {\n    //   const otherMarkers = new naver.maps.Marker({\n    //     position: new naver.maps.LatLng(markerArr[i].lat, markerArr[i].lng),\n    //     map,\n    //     // 원하는 이미지로 마커 커스텀\n    //     icon: {\n    //       url: markerIcon,\n    //       size: new naver.maps.Size(50, 52),\n    //       scaledSize: new naver.maps.Size(50, 52),\n    //       origin: new naver.maps.Point(0, 0),\n    //       anchor: new naver.maps.Point(25, 26),\n    //     },\n    //   });\n\n    //   markers.push(otherMarkers);\n    // }\n\n    // const getClickHandler = (seq) => {\n    //   return () => {\n    //     const marker = markers[seq];\n    //     console.log(seq);\n    //     setPlaceInfo(top12List[seq]);\n    //     send();\n    //   };\n    // };\n\n    // for (let i = 0; i < markers.length; i += 1) {\n    //   naver.maps.Event.addListener(markers[i], \"click\", getClickHandler(i));\n    // }\n  }, []);\n  useEffect(() => {\n    // 주변 마커 나타내기\n    if (markers.current[0]) {\n      markers.current.forEach((e) => {\n        e.setMap(null);\n      });\n      // markerList 배열 초기화\n      markers.current.splice(0);\n    }\n    // const markers = [];\n    // 반복문을 통해 찍어준다\n    for (let i = 0; i < markerArr.length; i++) {\n      const otherMarkers = new naver.maps.Marker({\n        position: new naver.maps.LatLng(markerArr[i].lat, markerArr[i].lng),\n        map,\n        // 원하는 이미지로 마커 커스텀\n        icon: {\n          url: markerIcon,\n          size: new naver.maps.Size(50, 52),\n          scaledSize: new naver.maps.Size(50, 52),\n          origin: new naver.maps.Point(0, 0),\n          anchor: new naver.maps.Point(25, 26),\n        },\n      });\n\n      markers.current.push(otherMarkers);\n\n      // naver.maps.Event.addListener(map, \"idle\", () => {\n      //   updateMarkers(map, markers);\n      // });\n      // const updateMarkers = (isMap, isMarkers) => {\n      //   const mapBounds = isMap.getBounds();\n      //   let marker;\n      //   let position;\n\n      //   for (let i = 0; i < isMarkers.length; i += 1) {\n      //     marker = isMarkers[i];\n      //     position = marker.getPosition();\n\n      //     if (mapBounds.hasLatLng(position)) {\n      //       showMarker(isMap, marker);\n      //     } else {\n      //       hideMarker(marker);\n      //     }\n      //   }\n      // };\n\n      // const showMarker = (isMap, marker) => {\n      //   marker.setMap(isMap);\n      // };\n\n      // const hideMarker = (marker) => {\n      //   marker.setMap(null);\n      // };\n      // for (let i = 0, len = markers.length; i < len; i++) {\n      //   markers[i].setMap(null);\n      // }\n    }\n\n    const getClickHandler = (seq) => {\n      return () => {\n        // const marker = markers[seq];\n        console.log(seq);\n        setPlaceInfo(top12List[seq]);\n        send(top12List[seq]);\n      };\n    };\n\n    for (let i = 0; i < markers.length; i += 1) {\n      naver.maps.Event.addListener(markers[i], \"click\", getClickHandler(i));\n    }\n  }, [top12List]);\n  return (\n    <Container>\n      <div id=\"map\" style={{ width: \"100%\", display: \"flex\", flex: 1 }} />\n      <InfoContainer>\n        <InfoImg src={placeInfo.firstimage2} />\n        <InfoTextContainer>\n          <InfoTextTop>\n            <TitleArea>\n              {placeInfo.title}\n              <StarIcon src={starIcon} />5\n            </TitleArea>\n            <CategoryArea>{placeInfo.describe}</CategoryArea>\n          </InfoTextTop>\n          <InfoTextBottom>\n            <BottomLeft>{addrReplace(placeInfo.addr1)}</BottomLeft>\n            <AddBtn>등록</AddBtn>\n          </InfoTextBottom>\n        </InfoTextContainer>\n      </InfoContainer>\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  width: 100%;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  flex: 1;\n  flex-direction: column;\n`;\nconst MapContainer = styled.div`\n  width: 100%;\n  display: flex;\n  flex: 1;\n`;\nconst InfoContainer = styled.div`\n  display: flex;\n  width: 100%;\n  height: 120px;\n  padding: 10px 20px;\n  flex-direction: row;\n  background-color: #fff;\n  border-top: 1px solid #d9d9d9;\n`;\nconst InfoImg = styled.img`\n  width: 100px;\n  height: 100px;\n  border-radius: 8px;\n  margin-right: 10px;\n`;\nconst InfoTextContainer = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: space-between;\n`;\nconst InfoTextTop = styled.div`\n  display: flex;\n  width: 100%;\n  height: 45px;\n  flex-direction: column;\n  justify-content: space-between;\n`;\nconst InfoTextBottom = styled.div`\n  display: flex;\n  width: 100%;\n  height: 42px;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n`;\nconst TitleArea = styled.div`\n  display: flex;\n  height: 26px;\n  flex: 1;\n  font-size: 18px;\n  font-weight: 500;\n  line-height: 26.06px;\n  color: #000;\n  align-items: center;\n`;\nconst CategoryArea = styled.div`\n  display: flex;\n  font-size: 12px;\n  font-weight: 300;\n  line-height: 17.38px;\n  color: #25b1fa;\n`;\nconst StarIcon = styled.img`\n  width: 18px;\n  height: 18px;\n  margin-left: 10px;\n  margin-right: 6px;\n`;\nconst BottomLeft = styled.div`\n  display: flex;\n  flex: 1;\n`;\nconst AddBtn = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 55px;\n  height: 30px;\n  border: 1px solid #25b1fa;\n  border-radius: 8px;\n  font-size: 12px;\n  font-weight: 500;\n  line-height: 17.38px;\n  color: #25b1fa;\n  cursor: pointer;\n`;\n\nexport default AddDestinationMap;\n"],"names":["Container","styled","div","_templateObject","_taggedTemplateLiteral","InfoContainer","_templateObject2","_templateObject3","InfoImg","img","_templateObject4","InfoTextContainer","_templateObject5","InfoTextTop","_templateObject6","InfoTextBottom","_templateObject7","TitleArea","_templateObject8","CategoryArea","_templateObject9","StarIcon","_templateObject10","BottomLeft","_templateObject11","AddBtn","_templateObject12","_useState","useState","_useState2","_slicedToArray","top12List","setTop12List","_useState3","_useState4","markerArr","setMarkerArr","_useState5","_useState6","placeInfo","setPlaceInfo","naver","window","_useState7","_useState8","map","setMap","markers","useRef","document","addEventListener","e","parseData","JSON","parse","data","result","_toConsumableArray","el","lat","mapy","lng","mapx","useEffect","firstMap","maps","Map","center","LatLng","zoomControl","zoom","current","forEach","splice","i","length","otherMarkers","Marker","position","icon","url","markerIcon","size","Size","scaledSize","origin","Point","anchor","push","getClickHandler","seq","console","log","ReactNativeWebView","postMessage","Event","addListener","_jsxs","children","_jsx","id","style","width","display","flex","src","firstimage2","title","describe","place","undefined","split","slice","join","addrReplace","addr1"],"sourceRoot":""}