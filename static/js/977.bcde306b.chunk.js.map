{"version":3,"file":"static/js/977.bcde306b.chunk.js","mappings":"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","sources":["components/AdminHeader.jsx","routes/Admin/AdminActivityStatus.jsx"],"sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport AdminHeaderLogo from \"../assets/image/AdminHeaderLogo.png\";\nimport { Link } from \"react-router-dom\";\n\nconst AdminHeader = () => {\n  return (\n    <Container>\n      <HeaderLogo src={AdminHeaderLogo} />\n      <NavListContainer>\n        <NavList>\n          <StyledLink to=\"/admin-activitystatus\">여행대로 현황</StyledLink>\n        </NavList>\n        <NavList style={{ marginLeft: 10 }}>\n          <StyledLink to=\"/admin-filter\">검색량 필터</StyledLink>\n        </NavList>\n        <NavList style={{ marginLeft: 10 }}>\n          <StyledLink to=\"/admin-work\">출근부</StyledLink>\n        </NavList>\n        {/* <NavList style={{ marginLeft: 10 }}>\n          <StyledLink to=\"/admin-content\">여행지 순위설정</StyledLink>\n        </NavList> */}\n      </NavListContainer>\n    </Container>\n  );\n};\n\nexport default AdminHeader;\n\nconst Container = styled.div`\n  width: 100%;\n  height: 85px;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  /* padding: 0px 50px; */\n  border-bottom: 1px solid #dbdbdb;\n`;\nconst HeaderLogo = styled.img`\n  width: 127px;\n  height: 30px;\n  margin-right: 65px;\n`;\nconst NavListContainer = styled.ul`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  flex: 1;\n  height: 100%;\n`;\nconst NavList = styled.li`\n  /* font-size: 22px;\n  font-weight: 400;\n  color: #000;\n  cursor: pointer;\n  padding: 10px 10px; */\n`;\nconst StyledLink = styled(Link)`\n  font-size: 22px;\n  font-weight: 400;\n  color: #000;\n  margin-right: 20px;\n  cursor: pointer;\n  text-decoration: none; /* 링크의 기본 밑줄 제거 */\n`;\n","import React, { useState, useEffect, useRef, useParams } from \"react\";\nimport { useLocation, useNavigate, useSearchParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport styled from \"styled-components\";\nimport AdminHeader from \"../../components/AdminHeader\";\nimport { ClipLoader } from \"react-spinners\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { format, subDays } from \"date-fns\";\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend } from \"recharts\";\n\nconst AdminActivityStatus = () => {\n  const [data, setData] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  const [isAllSelected, setIsAllSelected] = useState(true);\n  const [isType, setIsType] = useState(true);\n  // const [isWeekSelected, setIsWeekSelected] = useState(false);\n  // const [isMonthSelected, setIsMonthSelected] = useState(false);\n  // const [isYearSelected, setIsYearSelected] = useState(false);\n  const [startDate, setStartDate] = useState(null);\n  const [endDate, setEndDate] = useState(null);\n  const [isSelected, setIsSelected] = useState(false);\n  const datePickerRef = useRef(null);\n  const { state } = useLocation();\n  // const currentDate = subDays(new Date(), 1);\n  const currentDate = new Date();\n  const openDate = new Date(2023, 7, 17);\n  // const startDate7DaysAgo = subDays(currentDate, 6);\n  // const startDate30DaysAgo = subDays(currentDate, 30);\n  // const startDate365DaysAgo = subDays(currentDate, 365);\n  const [graphData, setGraphData] = useState([]);\n  const [MAU, setMAU] = useState([]);\n  const [userData, setUserData] = useState({});\n\n  // 날짜를 'M.D' 형식으로 변환하는 함수\n  function formatDate(dateString) {\n    if (dateString.length === 10) {\n      // 'YYYY-MM-DD' 형식\n      const [year, month, day] = dateString.split(\"-\");\n      const formattedMonth = parseInt(month, 10);\n      const formattedDay = parseInt(day, 10);\n      return `${formattedMonth}.${formattedDay}`;\n    } else if (dateString.length === 7) {\n      // 'YYYY-MM' 형식\n      const [year, month] = dateString.split(\"-\");\n      const formattedMonth = parseInt(month, 10);\n      return `${formattedMonth}월`;\n    } else {\n      throw new Error(\"데이터 형식 오류\");\n    }\n  }\n\n  const getData = async () => {\n    setIsLoading(true);\n    const dateParams = [];\n    if (startDate) {\n      const formattedStartDate = format(startDate, \"yyyy-MM-dd\");\n      dateParams.push(`startDate=${formattedStartDate}`);\n    }\n    if (endDate) {\n      const formattedEndDate = format(endDate, \"yyyy-MM-dd\");\n      dateParams.push(`endDate=${formattedEndDate}`);\n    }\n    const Query = dateParams.join(\"&\");\n\n    await axios({\n      method: \"get\",\n      headers: {\n        \"Access-Control-Allow-Credentials\": true,\n        \"ngrok-skip-browser-warning\": true,\n      },\n      url: `${process.env.REACT_APP_API_URL}/admin/tourdata/appdata?${Query}`,\n    })\n      .then((res) => {\n        // console.log(res.data);\n        if (res.data.isPass) {\n          setData(res.data.tourdataList);\n          console.log(\"-----------------------\");\n          console.log(res.data);\n          console.log(\"-----------------------\");\n          setIsLoading(false);\n          const copyGraphData = [...res.data.graphData];\n          const graphResult = copyGraphData?.map((item) => {\n            return {\n              DAU: item.appExecution,\n              date: formatDate(item.date),\n              회원: item.user,\n              게시글: item.feed,\n              NFT: item.nft,\n              여행지: item.requestPlace,\n              일정: item.schedule,\n              \"재방문 수\": item.revisit,\n              \"5방문 수\": item.fiveVisits,\n            };\n          });\n          const copyMAUData = [...res.data.MAUdata];\n          const resultMAU = copyMAUData?.map((item) => {\n            return {\n              MAU: item.appExecution,\n              date: formatDate(item?.date),\n            };\n          });\n          setGraphData(graphResult);\n          setMAU(resultMAU);\n          setUserData(res.data.userData);\n          // console.log(resultMAU);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n  const handleAllClick = () => {\n    // setIsMonthSelected(false);\n    // setIsWeekSelected(false);\n    // setIsYearSelected(false);\n    setIsSelected(false);\n    setIsAllSelected(true);\n    setStartDate(\"\");\n    setEndDate(\"\");\n  };\n  // const handleWeekClick = () => {\n  //     setIsAllSelected(false);\n  //     setIsWeekSelected(true);\n  //     setIsMonthSelected(false);\n  //     setIsYearSelected(false);\n  //     setStartDate(startDate7DaysAgo);\n  //     setEndDate(currentDate);\n  // };\n  // const handleMonthClick = () => {\n  //     setIsAllSelected(false);\n  //     setIsWeekSelected(false);\n  //     setIsMonthSelected(true);\n  //     setIsYearSelected(false);\n  //     setStartDate(startDate30DaysAgo);\n  //     setEndDate(currentDate);\n  // };\n  // const handleYearClick = () => {\n  //     setIsAllSelected(false);\n  //     setIsWeekSelected(false);\n  //     setIsMonthSelected(false);\n  //     setIsYearSelected(true);\n  //     setStartDate(startDate365DaysAgo);\n  //     setEndDate(currentDate);\n  // };\n\n  const usageStatus = data?.usageStatus ?? [];\n  const footerClick = data?.footerClick ?? [];\n\n  const handleDateStartSelect = (date) => {\n    if (date > currentDate) {\n      alert(\"선택한 날짜는 없는 데이터입니다. 현재날짜보다 앞의 날짜여야 합니다.\");\n    } else if (endDate > currentDate) {\n      alert(\"선택한 날짜는 없는 데이터입니다. 현재날짜보다 앞의 날짜여야 합니다.\");\n    } else {\n      if (!startDate) {\n        setStartDate(date);\n        setEndDate(date);\n      } else if (startDate && endDate && startDate === endDate) {\n        if (date < startDate) {\n          setStartDate(date);\n        } else if (date > endDate) {\n          setEndDate(date);\n        } else if (startDate < date && date < endDate) {\n          setStartDate(date);\n          setEndDate(date);\n        }\n      } else if (startDate && endDate && startDate !== endDate) {\n        if (date === endDate) {\n          setStartDate(date);\n        } else if (date < startDate) {\n          setStartDate(date);\n        } else if (date > startDate && date < endDate) {\n          setStartDate(date);\n        } else if (date > startDate && date > endDate) {\n          setStartDate(date);\n          setEndDate(date);\n        }\n      }\n    }\n    setIsAllSelected(false);\n    setIsSelected(true);\n    // setIsWeekSelected(false);\n    // setIsMonthSelected(false);\n    // setIsYearSelected(false);\n  };\n  const handleDateEndSelect = (date) => {\n    if (date > currentDate) {\n      alert(\"선택한 날짜는 없는 데이터입니다. 현재날짜보다 앞의 날짜여야 합니다.\");\n    } else if (endDate > currentDate) {\n      alert(\"선택한 날짜는 없는 데이터입니다. 현재날짜보다 앞의 날짜여야 합니다.\");\n    } else {\n      if (!startDate) {\n        setStartDate(date);\n        setEndDate(date);\n      } else if (startDate && endDate && startDate === endDate) {\n        if (date < startDate) {\n          setStartDate(date);\n        } else if (date > endDate) {\n          setEndDate(date);\n        } else if (startDate < date && date < endDate) {\n          setStartDate(date);\n          setEndDate(date);\n        }\n      } else if (startDate && endDate && startDate !== endDate) {\n        if (date === endDate) {\n          setStartDate(date);\n        } else if (date < endDate) {\n          setEndDate(date);\n        } else if (date > endDate) {\n          setEndDate(date);\n        }\n      }\n    }\n    setIsSelected(true);\n    setIsAllSelected(false);\n    // setIsWeekSelected(false);\n    // setIsMonthSelected(false);\n    // setIsYearSelected(false);\n  };\n\n  useEffect(() => {\n    getData();\n    console.log(\"재시작\");\n  }, [startDate, endDate]);\n\n  return (\n    <Container>\n      <AdminHeader />\n      {isLoading ? (\n        <LoadingBox>\n          <ClipLoader color=\"#25B1FA\" />\n        </LoadingBox>\n      ) : (\n        <>\n          <ContentHeaderArea>\n            {/* <HeaderArea>\n              <HeaderText>여행대로 사용현황</HeaderText>\n              <UpdateText>다운로드 수 업데이트 날짜: 매주 월, 목</UpdateText>\n            </HeaderArea> */}\n            <div style={{ flexDirection: \"row\" }}>\n              <DateArea>\n                <AllButton\n                  onClick={handleAllClick}\n                  style={{\n                    backgroundColor: isAllSelected ? \"#ff9431\" : \"#ffffff\",\n                    color: isAllSelected ? \"#ffffff\" : \"#ff9431\",\n                  }}\n                >\n                  전체\n                </AllButton>\n                <StyledDatePicker\n                  ref={datePickerRef}\n                  selected={startDate}\n                  onChange={(date) => {\n                    handleDateStartSelect(date);\n                  }}\n                  selectsStart\n                  startDate={startDate}\n                  customInput={\n                    <DateButton>\n                      <BoldText>시작일</BoldText>:{\" \"}\n                      {startDate ? format(startDate, \"yyyy-MM-dd\") : format(openDate, \"yyyy-MM-dd\")}\n                    </DateButton>\n                  }\n                />\n                <StyledDatePicker\n                  ref={datePickerRef}\n                  selected={endDate}\n                  onChange={(date) => {\n                    handleDateEndSelect(date);\n                  }}\n                  selectsEnd\n                  startDate={startDate}\n                  endDate={endDate}\n                  minDate={startDate || new Date()}\n                  customInput={\n                    <DateButton>\n                      <BoldText>종료일</BoldText>:{\" \"}\n                      {endDate ? format(endDate, \"yyyy-MM-dd\") : format(currentDate, \"yyyy-MM-dd\")}\n                    </DateButton>\n                  }\n                />\n                <div style={{ flexDirection: \"row\", alignItems: \"center\" }}>\n                  <ToggleButton\n                    onClick={() => setIsType(true)}\n                    style={{\n                      backgroundColor: isType ? \"#ff9431\" : \"#ffffff\",\n                      color: isType ? \"#ffffff\" : \"#ff9431\",\n                    }}\n                  >\n                    그래프\n                  </ToggleButton>\n                  <ToggleButton\n                    style={{\n                      marginLeft: 5,\n                      backgroundColor: !!!isType ? \"#ff9431\" : \"#ffffff\",\n                      color: !!!isType ? \"#ffffff\" : \"#ff9431\",\n                    }}\n                    onClick={() => setIsType(false)}\n                  >\n                    표\n                  </ToggleButton>\n                </div>\n              </DateArea>\n            </div>\n            {/* <MonthButton\n                                  onClick={handleWeekClick}\n                                  style={{\n                                      backgroundColor: isWeekSelected\n                                          ? \"#ff9431\"\n                                          : \"#ffffff\",\n                                      color: isWeekSelected\n                                          ? \"#ffffff\"\n                                          : \"#ff9431\",\n                                  }}\n                              >\n                                  최근 7일\n                              </MonthButton>\n                              <MonthButton\n                                  onClick={handleMonthClick}\n                                  style={{\n                                      backgroundColor: isMonthSelected\n                                          ? \"#ff9431\"\n                                          : \"#ffffff\",\n                                      color: isMonthSelected\n                                          ? \"#ffffff\"\n                                          : \"#ff9431\",\n                                  }}\n                              >\n                                  최근 30일\n                              </MonthButton>\n                              <YearButton\n                                  onClick={handleYearClick}\n                                  style={{\n                                      backgroundColor: isYearSelected\n                                          ? \"#ff9431\"\n                                          : \"#ffffff\",\n                                      color: isYearSelected\n                                          ? \"#ffffff\"\n                                          : \"#ff9431\",\n                                  }}\n                              >\n                                  최근 365일\n                              </YearButton> */}\n          </ContentHeaderArea>\n          {isType ? (\n            <>\n              {/* <ContentContaner style={{ marginTop: 20 }}>\n                <ContentArea>\n                  <GraphArea>그래프</GraphArea>\n                </ContentArea>\n              </ContentContaner> */}\n              <ContentHeaderArea>\n                <HeaderArea>\n                  <HeaderText>\n                    여행대로 통계 (회원 {userData.totalUserCount}명, 당일\n                    <span style={{ color: \"red\", marginLeft: 5 }}> +{userData.todayUserCount}</span>\n                    )\n                  </HeaderText>\n                </HeaderArea>\n              </ContentHeaderArea>\n              <LineChart width={1000} height={300} data={graphData} style={{ marginTop: 0 }}>\n                <Line type=\"monotone\" dataKey=\"회원\" stroke=\"#25B1FA\" dot={false} />\n                {/* <Line type=\"monotone\" dataKey=\"회원 DAU\" stroke=\"#82ca9d\" /> */}\n                <Line type=\"monotone\" dataKey=\"일정\" stroke=\"#1a28ee\" dot={false} />\n                <Line type=\"monotone\" dataKey=\"여행지\" stroke=\"#be2f42\" dot={false} />\n                <Line type=\"monotone\" dataKey=\"게시글\" stroke=\"#20a306\" dot={false} />\n                <Line type=\"monotone\" dataKey=\"NFT\" stroke=\"#6d41f1\" dot={false} />\n                <XAxis dataKey=\"date\" interval={15} />\n                <YAxis />\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <Tooltip />\n                <Legend\n                  layout=\"vetical\"\n                  verticalAlign=\"top\"\n                  align=\"right\"\n                  wrapperStyle={{ lineHeight: \"40px\", right: -120, marginTop: \"30px\" }}\n                />\n              </LineChart>\n              <HeaderArea style={{ marginTop: 10 }}>\n                <HeaderText>당일 회원가입 정보</HeaderText>\n              </HeaderArea>\n              <table style={{ width: 1000, marginBottom: 20 }}>\n                <thead>\n                  <tr>\n                    <TableHeader style={{ width: 20 }}>순번</TableHeader>\n                    <TableHeader style={{ width: 86 }}>닉네임</TableHeader>\n                    <TableHeader style={{ width: 82 }}>생년월일</TableHeader>\n                    <TableHeader style={{ width: 82 }}>성별</TableHeader>\n                    <TableHeader style={{ width: 82 }}>지역</TableHeader>\n                    <TableHeader style={{ width: 82 }}>시군구</TableHeader>\n                    <TableHeader style={{ width: 82 }}>가입시간</TableHeader>\n                  </tr>\n                </thead>\n                <tbody>\n                  {data?.todayUsers?.map((item, idx) => (\n                    <tr key={idx}>\n                      <TableRow>{idx + 1}</TableRow>\n                      <TableRow>{item.name}</TableRow>\n                      <TableRow>{item.birth}</TableRow>\n                      <TableRow>{item.gender}</TableRow>\n                      <TableRow>{item.region}</TableRow>\n                      <TableRow>{item.city}</TableRow>\n                      <TableRow>{item.created_at}</TableRow>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n              <div style={{ marginBottom: 100 }}>\n                <RowChartArea>\n                  <ContentHeaderArea style={{ marginRight: 450 }}>\n                    <HeaderArea>\n                      <HeaderText>DAU</HeaderText>\n                    </HeaderArea>\n                  </ContentHeaderArea>\n                  <ContentHeaderArea>\n                    <HeaderArea>\n                      <HeaderText>MAU</HeaderText>\n                    </HeaderArea>\n                  </ContentHeaderArea>\n                </RowChartArea>\n                <RowChartArea>\n                  <LineChart width={500} height={300} data={graphData} style={{ marginTop: 0 }}>\n                    <Line type=\"monotone\" dataKey=\"DAU\" stroke=\"#82ca9d\" dot={false} />\n                    <Line type=\"monotone\" dataKey=\"재방문 수\" stroke=\"#2724d6\" dot={false} />\n                    <Line type=\"monotone\" dataKey=\"5방문 수\" stroke=\"#d14020\" dot={false} />\n                    <XAxis dataKey=\"date\" interval={15} />\n                    <YAxis />\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <Tooltip />\n                    <Legend />\n                  </LineChart>\n                  <LineChart width={500} height={300} data={MAU} style={{ marginTop: 0 }}>\n                    <Line type=\"monotone\" dataKey=\"MAU\" stroke=\"#e2a406\" dot={false} />\n                    <XAxis dataKey=\"date\" />\n                    <YAxis />\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <Tooltip />\n                    <Legend />\n                  </LineChart>\n                </RowChartArea>\n              </div>\n            </>\n          ) : (\n            <div style={{ flexDirection: \"column\", marginTop: 10 }}>\n              <ChartArea>\n                <div>\n                  <TableTitle>사용현황</TableTitle>\n                  <table>\n                    <thead>\n                      <tr>\n                        <TableHeader style={{ width: 134 }}>목록</TableHeader>\n                        <TableHeader style={{ width: 105 }}>수</TableHeader>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {usageStatus?.map((item, idx) => {\n                        const nameWithoutPrefix = item.name.replace(/^전체\\s+/, \"\").trim();\n\n                        return (\n                          <tr key={idx}>\n                            <TableRow>{nameWithoutPrefix}</TableRow>\n                            <TableRow>{item.sum_count}</TableRow>\n                          </tr>\n                        );\n                      })}\n                    </tbody>\n                  </table>\n                </div>\n                <div>\n                  <TableTitle>탭 클릭 수</TableTitle>\n                  <table>\n                    <thead>\n                      <tr>\n                        <TableHeader style={{ width: 86 }}>탭</TableHeader>\n                        <TableHeader style={{ width: 82 }}>클릭 수</TableHeader>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {footerClick?.map((item, idx) => (\n                        <tr key={idx}>\n                          <TableRow>{item.name}</TableRow>\n                          <TableRow>{item.sum_count}</TableRow>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n                <div>\n                  <TableTitle>방문자 현황</TableTitle>\n                  <table>\n                    <thead>\n                      <tr>\n                        <TableHeader style={{ width: 52 }}>순위</TableHeader>\n                        <TableHeader style={{ width: 118 }}>로그인 방식</TableHeader>\n                        <TableHeader style={{ width: 184 }}>유저 아이디</TableHeader>\n                        <TableHeader style={{ width: 52 }}>수</TableHeader>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {isSelected\n                        ? data?.mostVisitors\n                            .sort((a, b) => b.sum_count - a.sum_count)\n                            .map((el, idx) => {\n                              return (\n                                <tr key={idx}>\n                                  <TableRow>{idx + 1}</TableRow>\n                                  <TableRow>{el?.login_method}</TableRow>\n                                  <TableRow>{el?.user_name}</TableRow>\n                                  <TableRow>{el?.sum_count}</TableRow>\n                                </tr>\n                              );\n                            })\n                        : data?.mostVisitors?.map((el, idx) => {\n                            return (\n                              <tr key={idx}>\n                                <TableRow>{idx + 1}</TableRow>\n                                <TableRow>{el?.login_method}</TableRow>\n                                <TableRow>{el?.user_name}</TableRow>\n                                <TableRow>{el?.sum_count}</TableRow>\n                              </tr>\n                            );\n                          })}\n                    </tbody>\n                  </table>\n                </div>\n              </ChartArea>\n              <ChartAreaContainer>\n                <ChartArea style={{ marginBottom: 33 }}>\n                  <div>\n                    <TableTitle>활동자 현황</TableTitle>\n                    <table>\n                      <thead>\n                        <tr>\n                          <TableHeader style={{ width: 48 }}>순위</TableHeader>\n                          <TableHeader style={{ width: 108 }}>로그인 방식</TableHeader>\n                          <TableHeader style={{ width: 190 }}>유저 아이디</TableHeader>\n                          <TableHeader style={{ width: 48 }}>수</TableHeader>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {isSelected\n                          ? data.mostActivist\n                              .sort((a, b) => b.sum_count - a.sum_count)\n                              .map((el, idx) => {\n                                return (\n                                  <tr key={idx}>\n                                    <TableRow>{idx + 1}</TableRow>\n                                    <TableRow>{el?.login_method}</TableRow>\n                                    <TableRow>{el?.user_name}</TableRow>\n                                    <TableRow>{el?.sum_count}</TableRow>\n                                  </tr>\n                                );\n                              })\n                          : data?.mostActivist?.map((el, idx) => {\n                              return (\n                                <tr key={idx}>\n                                  <TableRow>{idx + 1}</TableRow>\n                                  <TableRow>{el?.login_method}</TableRow>\n                                  <TableRow>{el?.user_name}</TableRow>\n                                  <TableRow>{el?.sum_count}</TableRow>\n                                </tr>\n                              );\n                            })}\n                      </tbody>\n                    </table>\n                  </div>\n                  <div>\n                    <TableTitle>커뮤니티 등록자 현황</TableTitle>\n                    <table>\n                      <thead>\n                        <tr>\n                          <TableHeader style={{ width: 48 }}>순위</TableHeader>\n                          <TableHeader style={{ width: 108 }}>로그인 방식</TableHeader>\n                          <TableHeader style={{ width: 168 }}>유저 아이디</TableHeader>\n                          <TableHeader style={{ width: 108 }}>게시글 등록 수</TableHeader>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {isSelected\n                          ? data.mostCommunity\n                              .sort((a, b) => b.sum_count - a.sum_count)\n                              .map((el, idx) => {\n                                return (\n                                  <tr key={idx}>\n                                    <TableRow>{idx + 1}</TableRow>\n                                    <TableRow>{el?.login_method}</TableRow>\n                                    <TableRow>{el?.user_name}</TableRow>\n                                    <TableRow>{el?.sum_count}</TableRow>\n                                  </tr>\n                                );\n                              })\n                          : data?.mostCommunity?.map((el, idx) => {\n                              return (\n                                <tr key={idx}>\n                                  <TableRow>{idx + 1}</TableRow>\n                                  <TableRow>{el?.login_method}</TableRow>\n                                  <TableRow>{el?.user_name}</TableRow>\n                                  <TableRow>{el?.sum_count}</TableRow>\n                                </tr>\n                              );\n                            })}\n                      </tbody>\n                    </table>\n                  </div>\n                </ChartArea>\n                <ChartArea>\n                  <div>\n                    <TableTitle>일정 등록자 현황</TableTitle>\n                    <table>\n                      <thead>\n                        <tr>\n                          <TableHeader style={{ width: 48 }}>순위</TableHeader>\n                          <TableHeader style={{ width: 108 }}>로그인 방식</TableHeader>\n                          <TableHeader style={{ width: 168 }}>유저 아이디</TableHeader>\n                          <TableHeader style={{ width: 82 }}>일정 등록 수</TableHeader>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {isSelected\n                          ? data.mostSchedule\n                              .sort((a, b) => b.sum_count - a.sum_count)\n                              .map((el, idx) => {\n                                return (\n                                  <tr key={idx}>\n                                    <TableRow>{idx + 1}</TableRow>\n                                    <TableRow>{el?.login_method}</TableRow>\n                                    <TableRow>{el?.user_name}</TableRow>\n                                    <TableRow>{el?.sum_count}</TableRow>\n                                  </tr>\n                                );\n                              })\n                          : data.mostSchedule.map((el, idx) => {\n                              return (\n                                <tr key={idx}>\n                                  <TableRow>{idx}</TableRow>\n                                  <TableRow>{el?.login_method}</TableRow>\n                                  <TableRow>{el?.user_name}</TableRow>\n                                  <TableRow>{el?.sum_count}</TableRow>\n                                </tr>\n                              );\n                            })}\n                      </tbody>\n                    </table>\n                  </div>\n                  <div>\n                    <TableTitle>놀이터 참여자 현황</TableTitle>\n                    <table>\n                      <thead>\n                        <tr>\n                          <TableHeader style={{ width: 48 }}>순위</TableHeader>\n                          <TableHeader style={{ width: 108 }}>로그인 방식</TableHeader>\n                          <TableHeader style={{ width: 168 }}>유저 아이디</TableHeader>\n                          <TableHeader style={{ width: 72 }}>참여 수</TableHeader>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {isSelected\n                          ? data.mostPlayGround\n                              .sort((a, b) => b.sum_count - a.sum_count)\n                              .map((el, idx) => {\n                                return (\n                                  <tr key={idx}>\n                                    <TableRow>{idx + 1}</TableRow>\n                                    <TableRow>{el?.login_method}</TableRow>\n                                    <TableRow>{el?.user_name}</TableRow>\n                                    <TableRow>{el?.sum_count}</TableRow>\n                                  </tr>\n                                );\n                              })\n                          : data.mostPlayGround.map((el, idx) => {\n                              return (\n                                <tr key={idx}>\n                                  <TableRow>{idx + 1}</TableRow>\n                                  <TableRow>{el?.login_method}</TableRow>\n                                  <TableRow>{el?.user_name}</TableRow>\n                                  <TableRow>{el?.sum_count}</TableRow>\n                                </tr>\n                              );\n                            })}\n                      </tbody>\n                    </table>\n                  </div>\n                </ChartArea>\n              </ChartAreaContainer>\n            </div>\n          )}\n        </>\n      )}\n    </Container>\n  );\n};\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 1920px;\n  height: 100%;\n  margin: 0 auto;\n  justify-content: center;\n  /* align-items: center; */\n  position: relative;\n  padding: 0px 50px;\n`;\nconst ContentContaner = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 1200px;\n  /* margin-bottom: 20px; */\n  /* height: 500px; */\n  /* background-color: red; */\n`;\nconst ContentHeaderArea = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-self: flex-start;\n  margin-top: 20px;\n`;\nconst HeaderArea = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  margin-bottom: 15px;\n`;\nconst HeaderText = styled.span`\n  display: flex;\n  font-size: 20px;\n  margin-right: 10px;\n`;\nconst UpdateText = styled.span`\n  display: flex;\n  font-size: 14px;\n  color: #777;\n`;\nconst DateArea = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  width: 450px;\n`;\nconst DateButton = styled.button`\n  background-color: #ffffff;\n  border: 2px solid #ff9431;\n  border-radius: 10px;\n  padding: 5px 10px;\n  font-size: 14px;\n  font-weight: 100;\n`;\nconst StyledDatePicker = styled(DatePicker)`\n  .react-datepicker-wrapper {\n    width: 100%;\n  }\n\n  .react-datepicker__input-container {\n    width: 100%;\n  }\n\n  .react-datepicker__input-container input {\n    width: 100%;\n  }\n`;\nconst AllButton = styled.button`\n  background-color: #ffffff;\n  border: 2px solid #ff9431;\n  border-radius: 10px;\n  padding: 5px 10px;\n  font-size: 13px;\n  color: #ff9431;\n`;\nconst MonthButton = styled.button`\n  background-color: #ffffff;\n  border: 2px solid #ff9431;\n  border-radius: 10px;\n  padding: 5px 10px;\n  font-size: 13px;\n  color: #ff9431;\n`;\nconst YearButton = styled.button`\n  background-color: #ffffff;\n  border: 2px solid #ff9431;\n  border-radius: 10px;\n  padding: 5px 10px;\n  font-size: 13px;\n  color: #ff9431;\n  width: 90px;\n`;\nconst BoldText = styled.span`\n  font-weight: 800;\n`;\nconst ContentArea = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  width: 100%;\n`;\nconst GraphArea = styled.div`\n  display: flex;\n  /* width: 920px; */\n  width: 100%;\n  height: 438px;\n  background-color: #d9d9d9;\n  vertical-align: middle;\n  text-align: center;\n`;\nconst ChartArea = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  width: 856px;\n`;\nconst ChartAreaContainer = styled.div`\n  display: flex;\n  margin-top: 10px;\n  flex-direction: column;\n`;\nconst TableHeader = styled.th`\n  text-align: center;\n  vertical-align: middle;\n  font-size: 14px;\n  font-weight: 500;\n  color: #000;\n  background-color: #ff943180;\n  height: 30px;\n  border: 1px solid #ff9431;\n`;\nconst TableRow = styled.td`\n  text-align: center;\n  vertical-align: middle;\n  font-size: 14px;\n  font-weight: 500;\n  color: #000;\n  height: 30px;\n  border: 1px solid #ff9431;\n`;\nconst TableTitle = styled.span`\n  display: flex;\n  font-size: 20px;\n  font-weight: 400;\n  color: #000;\n  margin-bottom: 14px;\n`;\nconst LoadingBox = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100vh;\n`;\nconst ToggleButton = styled.button`\n  background-color: #ffffff;\n  border: 2px solid #ff9431;\n  border-radius: 10px;\n  padding: 5px 10px;\n  font-size: 13px;\n  color: #ff9431;\n`;\nconst ToggleButton2 = styled.button`\n  background-color: #ffffff;\n  border: 2px solid #ff9431;\n  border-radius: 10px;\n  padding: 5px 10px;\n  font-size: 13px;\n  color: #ff9431;\n`;\nconst RowChartArea = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nexport default AdminActivityStatus;\n"],"names":["AdminHeader","_jsxs","Container","children","_jsx","HeaderLogo","src","NavListContainer","NavList","StyledLink","to","style","marginLeft","styled","div","_templateObject","_taggedTemplateLiteral","img","_templateObject2","ul","_templateObject3","li","_templateObject4","Link","_templateObject5","ContentHeaderArea","HeaderArea","HeaderText","span","DateArea","_templateObject6","_templateObject7","DateButton","button","_templateObject8","StyledDatePicker","DatePicker","_templateObject9","AllButton","_templateObject10","BoldText","_templateObject11","_templateObject12","_templateObject13","ChartArea","_templateObject14","_templateObject15","_templateObject16","ChartAreaContainer","_templateObject17","TableHeader","th","_templateObject18","TableRow","td","_templateObject19","TableTitle","_templateObject20","LoadingBox","_templateObject21","ToggleButton","_templateObject22","RowChartArea","_templateObject23","_templateObject24","AdminActivityStatus","_data$usageStatus","_data$footerClick","_data$todayUsers","_data$mostVisitors","_data$mostActivist","_data$mostCommunity","data","setData","useState","isLoading","setIsLoading","isAllSelected","setIsAllSelected","isType","setIsType","startDate","setStartDate","endDate","setEndDate","isSelected","setIsSelected","datePickerRef","useRef","state","useLocation","currentDate","Date","openDate","graphData","setGraphData","MAU","setMAU","userData","setUserData","formatDate","dateString","length","year","month","day","split","formattedMonth","parseInt","formattedDay","concat","Error","usageStatus","footerClick","useEffect","async","dateParams","formattedStartDate","format","push","formattedEndDate","Query","join","axios","method","headers","url","process","then","res","isPass","tourdataList","console","log","copyGraphData","graphResult","map","item","DAU","appExecution","date","회원","user","게시글","feed","NFT","nft","여행지","requestPlace","일정","schedule","revisit","fiveVisits","copyMAUData","MAUdata","resultMAU","catch","err","getData","ClipLoader","color","_Fragment","flexDirection","onClick","handleAllClick","backgroundColor","ref","selected","onChange","alert","handleDateStartSelect","selectsStart","customInput","handleDateEndSelect","selectsEnd","minDate","alignItems","totalUserCount","todayUserCount","LineChart","width","height","marginTop","Line","type","dataKey","stroke","dot","XAxis","interval","YAxis","CartesianGrid","strokeDasharray","Tooltip","Legend","layout","verticalAlign","align","wrapperStyle","lineHeight","right","marginBottom","todayUsers","idx","name","birth","gender","region","city","created_at","marginRight","nameWithoutPrefix","replace","trim","sum_count","mostVisitors","sort","a","b","el","login_method","user_name","mostActivist","mostCommunity","mostSchedule","mostPlayGround"],"sourceRoot":""}